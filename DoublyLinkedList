import java.util.NoSuchElementException;

public class DoublyLinkedList {
	
	private ListNode head;
	private ListNode tail;
	private int length;

	private class ListNode{
		
		private int data;
		private ListNode previous;
		private ListNode next;
		
		public ListNode(int data) {
			this.data = data;
		}
	}
	
	public DoublyLinkedList(){
		this.head = null;
		this.tail = null;
		this.length = 0;
	}
	
	public boolean isEmpty() {
		return length == 0; // head == null
	}
	
	public int length() {
		ListNode current = head;
		int count = 0;
		if(isEmpty()) {
			return 0;}
		while(current != null) {
			count++;
			current = current.next;
		}
		System.out.println(count);
		return count;
	}
	
	public void displayForwad() {
		
		if(head == null) {
			return;
		}
		ListNode current = head;
		while(current != null) {
			System.out.print(current.data + " -- > ");
			current = current.next;
		}
		System.out.println("null");
	}
	
	public void displayBackward() {
		
		if(head == null) {
			return;
		}
		ListNode current = tail;
		while(current != null) {
			System.out.print(current.data + " -- > ");
			current = current.previous;
		}
		System.out.println("null");
	}
	
	public void insertFirst(int value) {
		
		ListNode newNode = new ListNode(value);
		
		if(isEmpty()) {
			tail = newNode;
		}else {
			head.previous = newNode;
		}
		newNode.next = head; // to make head null
		head = newNode;
		length++;
	}
	
	public void insertLast(int value) {
		
		ListNode newNode = new ListNode(value);
		
		if(isEmpty()){
			head = newNode;
			}else {
				tail.next = newNode; // if it was head, it would be infinity loop
				newNode.previous = tail;
			}
		tail = newNode;
		length++;
		}
	
	public void insertGivenP(int value, int position) {
		ListNode newNode = new ListNode(value);
		ListNode current = head;
		int count = 1;
		if( position == 1) {
			newNode.next = head;
			head.previous = newNode;
			head = newNode;
		}else {
			while(count < position - 1) {
				current = current.next;
				count++;
			}
		
			newNode.next = current.next;
			current.next= newNode;
			newNode.previous = current;

		}
		
	}

	public void deleteFirst() {
		if(isEmpty()) {
			throw new NoSuchElementException();
		}
		ListNode current = head;
		if(head == tail) {
			tail = null;
		}
		else {
			head.next.previous = null;
		}
		head = head.next;
		current.next = null;
		length--;
		
	}
	public void deleteLast() {
		if(isEmpty()) {
			throw new NoSuchElementException();
		}
		ListNode current = tail;
		if(head == tail) {
			head = null;
		}
		else {
			tail.previous.next = null;
		}
		tail = tail.previous;
		current.previous = null;
		length--;
	}
	public static void main(String[] args) {
		
		DoublyLinkedList dll = new DoublyLinkedList();
		
		
		dll.insertFirst(1);
		dll.insertFirst(10);
		dll.insertLast(15);
		dll.insertLast(25);
		
		dll.length();
		
		
		dll.displayForwad();
		dll.displayBackward();
		dll.deleteFirst();
		dll.displayForwad();
		dll.deleteLast();
		dll.displayForwad();

	}
}
